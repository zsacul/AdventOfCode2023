use std::collections::{HashMap,HashSet, VecDeque};
//use std::thread::sleep;
//use rand::random;

use super::vec2::Vec2;

//use std::{thread, time};

#[derive(Debug)]
struct World
{
    hash    : HashMap<Vec2,char>,
    steps   : HashMap<Vec2,u64>,
    dx      : i64,
    dy      : i64,
}

impl World
{
    fn get_data(v:&[String])->HashMap<Vec2,char> 
    {
        let mut hash = HashMap::new();
    
        for (y,line) in v.iter().enumerate() 
        {
            for x in 0..v[y].len() 
            {
                let c= line.chars().nth(x).unwrap();
                
                if c!='.'
                {
                    hash.insert(Vec2::new(x as i64 - 65+49,y as i64 - 65+49),c); 
                }
            }
        }
        hash
    }

    fn c(&self,p:Vec2)->char
    {
        *self.hash.get(&p).unwrap_or(&'.')
    }

    fn c2(&self,p:Vec2)->char
    {
        let xx = (p.x + 99999999*self.dx) as usize % (self.dx as usize);
        let yy = (p.y + 99999999*self.dy) as usize % (self.dy as usize);
        let pp = Vec2::new( xx as i64,  yy as i64);

        *self.hash.get(&pp).unwrap_or(&'.')
    }

    fn s(&self,p:Vec2)->u64
    {
        *self.steps.get(&p).unwrap_or(&0)
    }

    fn make_step(&mut self,pos:Vec2,step:usize)
    {
        let v = self.steps.get(&pos).unwrap_or(&0);
        self.steps.insert(pos,v | (1<<step));
    }

    fn res(&self,steps:usize)->usize
    {
        let code = 1<<steps;
        self.steps.values().filter(|c| **c&code == code).count()
    }

    fn new(v:&[String])->World 
    {
        World 
        { 
            hash  : World::get_data(v),
            steps : HashMap::new(),
            dx    : v[0].len() as i64,
            dy    :    v.len() as i64,
        }    
    }

    #[allow(dead_code)]
    fn print(&self)
    {
        println!();
        println!("dx = {}, dy = {}",self.dx,self.dy);

        for y in 0..self.dy
        {
            for x in 0..self.dx
            {
                let c = self.hash.get(&Vec2::new(x,y)).unwrap_or(&'.');
                print!("{}",c);
            }
            println!();
        }
    }

    #[allow(dead_code)]
    fn print_hash(&self,hash:&HashSet<Vec2>,step:usize)
    {
        println!();
        println!("dx = {}, dy = {}",self.dx,self.dy);
        let s = 32;

        for yy in 0-s..self.dy+s
        {
            for xx in 0-s..self.dx+s
            {
                let x = xx; //s + xx-yy;
                let y = yy; //xx + yy;
                let p = Vec2::new(x as i64,y as i64);
                let c = hash.get(&p).is_some();

                if p.distance2(self.dx,self.dy)>2+2*step as i64
                {
                    print!(" ");
                }
                else
                if c { print!("â– "); }
                else { print!("."); }
            }
            println!();
        }
    }


    #[allow(dead_code)]
    fn printb(&self)
    {
        println!();
        println!("dx = {}, dy = {}",self.dx,self.dy);

        for y in 0..self.dy
        {
            for x in 0..self.dx
            {
                let c = self.steps.get(&Vec2::new(x,y)).unwrap_or(&0);

                match c
                {
                    0 => print!("."),
                    1 => print!("^"),
                    2 => print!(">"),
                    4 => print!("<"),
                    8 => print!("v"),
                    _ => print!("?"),
                    
                }
            }
            println!();
        }
    }

    fn calc(&mut self,steps:usize)->usize
    {
        let mut list = VecDeque::new();
        let pos = *self.hash.iter().find(|(_,c)| **c=='S').unwrap().0;
        self.hash.insert(pos,'.');

        //self.print();
        println!("pos={:?}",pos);

        list.push_back(pos);

        let mut hash:HashMap<Vec2,u128> = HashMap::new();
        let mut hashn:HashMap<Vec2,u128> = HashMap::new();
        hashn.insert(pos,1u128);

        
        for s in 0..steps
        {
            hash = hashn.clone();
            hashn.clear();

            let moves = list.len();
            for m in 0..moves
            {
                let pos = list.pop_front().unwrap();

                let val = *hash.get(&pos).unwrap_or(&0);

                if val>0 
                {
                    for p in pos.around4()
                    {
                        if self.c(p)!='#'
                        {
                            let was = *hashn.get(&p).unwrap_or(&0);
                            hashn.insert(p,was+val);
                          //  println!("p={:?},val={},was={}",p,val,was);
                            list.push_back(p);
                        }
                    }                        
                }
            }
            list = hashn.keys().map(|k| *k).collect();
        }
        hashn.values().count()

        //panic!("err");
    }

    fn calc2(&mut self,steps:usize)->HashSet<Vec2>
    {
        let mut list = VecDeque::new();
        let pos = *self.hash.iter().find(|(_,c)| **c=='S').unwrap().0;

        println!("pos = {:?}",pos);
        self.hash.insert(pos,'.');

        list.push_back(pos);

        let mut hash  : HashSet<Vec2> = HashSet::new();
        let mut hashn : HashSet<Vec2> = HashSet::new();
        hashn.insert(pos);
     
        for _ in 0..steps
        {
            hash = hashn.clone();
            hashn.clear();

            let moves = list.len();
            for _ in 0..moves
            {
                let pos = list.pop_front().unwrap();
                let val = hash.get(&pos).is_some();

                if val
                {
                    for p in pos.around4()
                    {
                        if self.c2(p)!='#'
                        {
                            hashn.insert(p);
                            list.push_back(p);
                        }
                    }                        
                }
            }
            list = hashn.iter().map(|k| *k).collect();
        }
        //hashn.len()
        hashn
    }


    fn count(&self,h:&HashSet<Vec2>,x:i64,y:i64,s:i64)->usize
    {
        let mut res = 0;
        let l = 2*s;

        for y in y*l-s..y*l+s
        {
            for x in x*l-s..x*l+s
            {
                if h.get(&Vec2::new(x,y)).is_some() 
                {
                    res+=1;
                }
            }
        }
        res
    }

    fn calc3(&mut self,steps:i64)->usize
    {
        let h = self.calc2(steps as usize);
        let s = 64;
        let odd  = self.count(&h,0,0,s) as i64;
        let even = self.count(&h,1,0,s) as i64;
        let odd2  = self.count(&h,2,0,s) as i64;
        let isteps = steps/s;

        let n_even = (isteps-1)/2;
        let n_odd  = isteps-n_even;

        println!("odd    {}",odd);
        println!("odd2    {}",odd2);
        println!("even   {}",even);
        println!("n_odd  {}",n_odd);
        println!("n_even {}",n_even);

        (n_even*even +
         n_odd*odd) as usize
    }

}


pub fn part1(data:&[String],steps:usize)->usize
{
    let mut w  = World::new(data);
    w.calc(steps)

    //let n = tools::i32_get_between(data[0], "(", ")");
    //r.iter()
    //.map(|s| hash(s))
    //.sum() 
}

pub fn part2(data:&[String],steps:usize)->usize
{
    let mut w = World::new(data);
    w.calc3(steps as i64)
    //let r: Vec<&str> = data[0].split(',').collect();
    //count2(r)

}

#[allow(unused)]
pub fn solve(data:&[String])
{    
    println!("Day21");
//    println!("part1:{}",part1(data,64));
  //  println!("part2:{}",part2(data,26501365));

  let v = get_big_field();
  let t = part2(&v,5000);
  //,16733044);

  //part2(data,26501365);
}

#[test]
fn test1()
{
    let v = 
    vec![
        "...........".to_string(),
        ".....###.#.".to_string(),
        ".###.##..#.".to_string(),
        "..#.#...#..".to_string(),
        "....#.#....".to_string(),
        ".##..S####.".to_string(),
        ".##..#...#.".to_string(),
        ".......##..".to_string(),
        ".##.#.####.".to_string(),
        ".##..##.##.".to_string(),
        "...........".to_string(),
    ];
    assert_eq!(part1(&v,1),2);
}

#[test]
fn test2()
{
    let v = 
    vec![
        "...........".to_string(),
        ".....###.#.".to_string(),
        ".###.##..#.".to_string(),
        "..#.#...#..".to_string(),
        "....#.#....".to_string(),
        ".##..S####.".to_string(),
        ".##..#...#.".to_string(),
        ".......##..".to_string(),
        ".##.#.####.".to_string(),
        ".##..##.##.".to_string(),
        "...........".to_string(),
    ];
    assert_eq!(part1(&v,2),4);
}


#[test]
fn test3()
{
    let v = 
    vec![
        "...........".to_string(),
        ".....###.#.".to_string(),
        ".###.##..#.".to_string(),
        "..#.#...#..".to_string(),
        "....#.#....".to_string(),
        ".##..S####.".to_string(),
        ".##..#...#.".to_string(),
        ".......##..".to_string(),
        ".##.#.####.".to_string(),
        ".##..##.##.".to_string(),
        "...........".to_string(),
    ];
    assert_eq!(part1(&v,3),6);
}


#[test]
fn test4()
{
    let v = 
    vec![
        "...........".to_string(),
        ".....###.#.".to_string(),
        ".###.##..#.".to_string(),
        "..#.#...#..".to_string(),
        "....#.#....".to_string(),
        ".##..S####.".to_string(),
        ".##..#...#.".to_string(),
        ".......##..".to_string(),
        ".##.#.####.".to_string(),
        ".##..##.##.".to_string(),
        "...........".to_string(),
    ];
    assert_eq!(part1(&v,6),16);
}

fn get_big_field()->Vec<String>
{
    let v = 
    vec![
        ".................................".to_string(),
        ".....###.#......###.#......###.#.".to_string(),
        ".###.##..#..###.##..#..###.##..#.".to_string(),
        "..#.#...#....#.#...#....#.#...#..".to_string(),
        "....#.#........#.#........#.#....".to_string(),
        ".##...####..##...####..##...####.".to_string(),
        ".##..#...#..##..#...#..##..#...#.".to_string(),
        ".......##.........##.........##..".to_string(),
        ".##.#.####..##.#.####..##.#.####.".to_string(),
        ".##..##.##..##..##.##..##..##.##.".to_string(),
        ".................................".to_string(),
        ".................................".to_string(),
        ".....###.#......###.#......###.#.".to_string(),
        ".###.##..#..###.##..#..###.##..#.".to_string(),
        "..#.#...#....#.#...#....#.#...#..".to_string(),
        "....#.#........#.#........#.#....".to_string(),
        ".##...####..##..S####..##...####.".to_string(),
        ".##..#...#..##..#...#..##..#...#.".to_string(),
        ".......##.........##.........##..".to_string(),
        ".##.#.####..##.#.####..##.#.####.".to_string(),
        ".##..##.##..##..##.##..##..##.##.".to_string(),
        ".................................".to_string(),
        ".................................".to_string(),
        ".....###.#......###.#......###.#.".to_string(),
        ".###.##..#..###.##..#..###.##..#.".to_string(),
        "..#.#...#....#.#...#....#.#...#..".to_string(),
        "....#.#........#.#........#.#....".to_string(),
        ".##...####..##...####..##...####.".to_string(),
        ".##..#...#..##..#...#..##..#...#.".to_string(),
        ".......##.........##.........##..".to_string(),
        ".##.#.####..##.#.####..##.#.####.".to_string(),
        ".##..##.##..##..##.##..##..##.##.".to_string(),
        ".................................".to_string(),
    ];
    v
}

#[test]
fn test2_1()
{
    let v = get_big_field();
    assert_eq!(part2(&v,6),16);
}


#[test]
fn test2_2()
{
    let v = get_big_field();
    assert_eq!(part2(&v,10),50);
}


#[test]
fn test2_3()
{
    let v = get_big_field();
    assert_eq!(part2(&v,50),1594);
}


#[test]
fn test2_4()
{
    let v = get_big_field();
    assert_eq!(part2(&v,100),6536);
}

fn test2_5()
{
    let v = get_big_field();
    assert_eq!(part2(&v,500),167004);
}

fn test2_6()
{
    let v = get_big_field();
    assert_eq!(part2(&v,1000),668697);
}

#[test]
fn test2_7()
{
    let v = get_big_field();
    assert_eq!(part2(&v,5000),16733044);
}


fn get_21_field()->Vec<String>
{

    vec![
        "...................................................................................................................................".to_string(),
        ".........#.............#..#.................................#..........#......##.............#.#..#.#......................##......".to_string(),
        "...#.................#.....#........#.#............#...#...#................##............#...#.............#.....#.......#........".to_string(),
        "...........#.#.#...........#................#....#....................................#........#..#...............#................".to_string(),
        "...#.......#...#...#...........#.#....##...........#...#...............................#..................#..#.#..#....#.#.#.......".to_string(),
        "..##.#.................#........#...........................................#...#...................................#..............".to_string(),
        "......#......................##....##......#.......................................#.........#........#...........#.#..............".to_string(),
        "...#.....#.......#...............#....##...#......#..#.......................#...#.#....#.........#.#.......#......................".to_string(),
        "..................................#...#.............#.............#.#..............#.......#.....................#.#...............".to_string(),
        "..#........#...............#....#....##.....#.....#..............................#.....#...#...#..#..............#.................".to_string(),
        ".#................................#.............##................#...#...................#............#.#....#...#.#.....#..#.....".to_string(),
        "..............#......#......................#.............#..#.........................#......##....#...........#.........#...###..".to_string(),
        "...#..............#.............#.....##.........#...................#...#...........#.....#..........#...............#.........#..".to_string(),
        "...#........#......................#.#....#...#...............#....................................#.#..#..........................".to_string(),
        "..........#.#.........#...#...#..........#..#...............#.........#....#..................................##.#.................".to_string(),
        "..#...........#...............#.........#...#.........##...#....#....................#....#..#.....#.....###.#.....#...............".to_string(),
        "...........................................#................#..............##............#.....#...#...............#...##.....##...".to_string(),
        ".......#...........#....#.....#.......................#.##..........#...#.................#.......#...................##...........".to_string(),
        "...........#.....#............#........#............#..........#.........##..#...................#..........................#......".to_string(),
        ".......#....#..##..........#..........#..............#.##.............................................#.....#.....#...#.#....#.....".to_string(),
        "..#...#.............#......#.#....#....#.........#.....#............#....#.......#.......#..#.#.....#...........#.............#.#..".to_string(),
        "...#.......#.....#...#.......##....#............................#...........#.............................#........#........#....#.".to_string(),
        ".............#.....##.#............#.#............................................#........#........#...#........#........##.#..#..".to_string(),
        ".....#..#..#......#.............................#.......#.........#..#.............#................##..#.........#........#.......".to_string(),
        "....#.......#...............#......#............................#.......#.#.............................................#..#.......".to_string(),
        ".....#.........#..............#..............#...............#..........#.........................#.#...#..#.......#........#...#..".to_string(),
        ".........................#.............................#...#.......#................................#.....#.#.....#...........#....".to_string(),
        "..............#......#......................##....#................#....#...........##.................#.........#.....##..........".to_string(),
        "..........#.....................#.........#...........#.....#........#...................................#.........................".to_string(),
        "..#...#..##..............#..............#.......#...............#.#.......#...........#.#.................##......#.........#.#....".to_string(),
        ".....##........#....##......#..................#...#...................#...........##.##..#...........#............#...............".to_string(),
        "...#............#..#...#.................#................................#.....#..#.....#...........#..#......#.##...#..#.....#...".to_string(),
        "......#.#...#...#......................#..#....................#......................................#......#...........#..#...#..".to_string(),
        "..............................................#..##...............#.......#..#...#.......##.#.#.........................#...#......".to_string(),
        "..#......#...#...........#..........#.....................#..........##...#....#.#......#..#.......................................".to_string(),
        "....#.......##..............................................#........##.....#......#.#..............................#........#.....".to_string(),
        "..................##..#.................................#........................................................#............#....".to_string(),
        "......#....#.........................#.#......#.....##......#........#.#........#.............#...........#..................#.....".to_string(),
        ".##....................#.............#.....#..........#...#.........##..........#............##.............#........#.............".to_string(),
        "..............#.....#............#.......................#.....##.........##..#........................................#...........".to_string(),
        "..............#...................................#.#.#......#..#....#............##.#..#.................................#........".to_string(),
        "....#..#............................#..#...#.......................................................#...........................#...".to_string(),
        "........#......#...........#.#.........##.#................#.##.....................#...............................#..............".to_string(),
        "...........................#......#.........................#..#..#...........#.................#.............................#..#.".to_string(),
        "......#...................#...#.........#.....#.........#.......#....#.......#......#...#.................................#........".to_string(),
        "....#.#..#...#...........#....#...........#..........#.........#........................#.#...............#.............#..........".to_string(),
        ".#............#.......................................#......#.#............###...................##.....#.............#...........".to_string(),
        ".......#....................................#.#..........#.#...#.........#.....#................#.....#...#........................".to_string(),
        "...........#.......................##.....#..#........##..............#.............#...........................................#..".to_string(),
        "........#.##.........#..........#........#.................#..............#......###....#........#.....................#.#.....#...".to_string(),
        ".....##.#...................#.............#........................#..................#..................###.............#.........".to_string(),
        "......................#.............#.#.....#..#............#......#...#.#.................#....#........#...................#.....".to_string(),
        "..#..................#.#..#............#.......#..............................................................#.#................#.".to_string(),
        "..#...#.................#..#.........#........#...#.#.#......#....#.#...#............#...........#.......#.........................".to_string(),
        "..#........................##...............................#.......#.......##.........#....#........#......#...............#......".to_string(),
        "...............#.#...........#...........#................#.#..#.........#.........#.........#..................#..#..........#....".to_string(),
        ".............#......#......#..#.#......#...#.#.................................#........#..#......#................#...........##..".to_string(),
        "............#.........................#..................................#......#...........#........#.............................".to_string(),
        "...#.......#.................#............#........................#.#...........#.#.............#.................................".to_string(),
        ".............#.......#.........#..............#..#..#.......#..............##.........#....#........##.#...#.......................".to_string(),
        ".....................#.#.........#.....#..#.........#................##.....#.#....................#........#......................".to_string(),
        "........#.........#......#...#.#............................#.......#..............#....#............#..###....#....#.#............".to_string(),
        "..................#.##..##.....#....#........................#..#....................#..#.....#..#..............#..................".to_string(),
        "..........#..##..........#.......##.#..#...........#..............#..#..........................#....#........#........#...........".to_string(),
        ".............#...#..#......#.#.....................................#..#.............#.......#....#............#....................".to_string(),
        ".................................................................S.................................................................".to_string(),
        ".................##.#...#.......#.....................#.#..............#......#..........#.##.........#.........##.................".to_string(),
        "............................#..#..................#............##................#.......#.....##........................##........".to_string(),
        "..................#......................#............#....#.#..#.....#..........#.#........................#.......#....#.........".to_string(),
        "........##.....#.#.........................#..#.....#...#.....#....#...#...#............#...............#.#........................".to_string(),
        "..............#....#.#...............#......#...............................#......#......#..............#.........................".to_string(),
        ".#.............##..#...................#.......#...........#...#................#.......#.........#.#...#..........#.#..#..........".to_string(),
        "......................#....................#.........................#.#........#........#............#....#......#.............#..".to_string(),
        "...#...............#......##......#.......#.....#..#.....#.................#..#.#.........#.....#........#....#....................".to_string(),
        "......................#....#...............#.....................................#.................#.........................#.#...".to_string(),
        ".....#.............#.....................#................#.......##...............................................................".to_string(),
        "...#...........#..................#............#........#...............#.............#......................................#.#...".to_string(),
        ".....#...............#.#......#.#...#..#...#..#........#.............................#.............#.........................#.....".to_string(),
        ".#.................#.....................#.......#..........#..........#....#.......#............#...#...#.........................".to_string(),
        ".........#..............##...............#.............#..#...#..............##....#..#.#.#..#...#.....#...#.....................#.".to_string(),
        ".#.......#.#...................#.#...............#.....#...#............................#....#......#..............................".to_string(),
        "....................#...#.....#................#..........#.....................................#....#.#.....#.....................".to_string(),
        ".........................................#.....#...............#.......#.........#.#.#......#...#.........................#...##...".to_string(),
        "..#.##...........................#.#.................................................#.......#.#....................#.....#..##....".to_string(),
        "..#.........#..#........##................#.......#..................#.#.........#.#.......#................................#......".to_string(),
        "....#....#................#..........#.#..........#...........#...#............#.....#................#..............#..#....#.....".to_string(),
        "..#.............#........#.....#...#..........#.........#...........#.......#............................#..................#.##...".to_string(),
        "....##...........##.............#...........#......#..........#.....#........................#.###................#.......#.....#..".to_string(),
        "........#..#.......................................................#.......#..........##.#..........#.#.............#.....#.#.#.#..".to_string(),
        ".#.#......#.###.................#....................................#...#..#..............#....#.#..##............#..#............".to_string(),
        "...........#....#...............##.#......#....#...#............................................#....#.........................#...".to_string(),
        "....#.............#................................#.......#...#..........##..................#...............................#....".to_string(),
        "........#.#.#..#.....................#.....##.#..#.......#..........#............................#........................#........".to_string(),
        "...........#.....................##.........#...#..........#....................##....................................##....#...#..".to_string(),
        ".....#.#......................................##........#..................#................................#.........#............".to_string(),
        "...#....#......#.....#....................#.............#...#......#.#...#............#..##...........................#........#...".to_string(),
        "..#....................#.............................#..........#.................##..##.#...#...................#....#.....##.....".to_string(),
        "...........................................##................#..#...........................#.............#.....#.............#.#..".to_string(),
        ".....................#......#.........#......#.......#.............................#...............................#........###....".to_string(),
        "............#........#......#.#..............##................#...#...................................................#...........".to_string(),
        ".................#...........#....................#..#............#.........#......................#..#.....................#......".to_string(),
        ".#..............#............##..................#..#...#....#....##.......#..#.#........#.........#.......#..#...#................".to_string(),
        "............#...#.................................#.#........................###....#..........................#.................#.".to_string(),
        ".......#.....#.........#....................#.............#..........#............#............................................##..".to_string(),
        "............#..#..............#....#............#.......#...#.....#........#........#...........#..#...#.....................#.#...".to_string(),
        "....#.#...........................#..............#...........#.......#................#...........#.##.....#............#..#.......".to_string(),
        "..........#...........#...#......#...............#.............#.......#......................#..........................#.........".to_string(),
        "..#.......#.#............#.......#...............#.......#................................................#.......#................".to_string(),
        "............#..............#........#..........#...#.....................#....#.............#.#.###.......#....#...................".to_string(),
        "....#..........#.#.....#.............#.................#......##.........#.......#..........#..................#........#..........".to_string(),
        "..#.#.#.........##....#.........#..........................###............................#......##...#.......#........#.......#...".to_string(),
        "....#....#.....................#..................#.#.#...............#........#..........................#.....#..............##..".to_string(),
        ".......#...#......#.......#..............#..................#.##........#.#.................................#......#..........#....".to_string(),
        "...#.....#...........##..##....#.....#.................#.....................................#......#....##...#.............#......".to_string(),
        "..........#.........................#...........................#.#........#.........#..#.....#.........#....#..##...#.#......#....".to_string(),
        "............................#.....#.#..#...#..................#.....................#........##..#............#....................".to_string(),
        "......#.............#........................................#.........#........................#..#...........#...#..#.....#......".to_string(),
        "...........#.....#................#.#..#........#...........#.....##...............................#...............#..........##...".to_string(),
        "......................#.........................#.........#....#...............................##.......#..#....#...#..............".to_string(),
        "..#.....#.......#....................##...........#...........#.................#.......#..........................................".to_string(),
        "....#....#..#............#......#..#..#.#..#......#...................#.........#...............#.#..#....................#........".to_string(),
        "........##..............................#.#.................##......................#...............#..#......#......#..........#..".to_string(),
        ".....#..#...........#.#.......#...............#.................................#......#...........................................".to_string(),
        "....##.##............#..............#..#..............#.........#...................................#.......#......................".to_string(),
        ".....#....#.....#........#......#..............................#...........#.........##......#...#............##...................".to_string(),
        "....#..........#..#............##..#....#.#....#..#.............#...........#.#............#......#........#.......#.#.............".to_string(),
        "........#..##.....#......##...............#......#.#.............................#..#...#........#....#..............#........#....".to_string(),
        "..#.................#....#...#........##.....#.............................#..#.#......#.....#...#................#................".to_string(),
        "...........#.#....................#.......##.........................................#..............#..#.............#.......#.....".to_string(),
        "..#.....#......#.....................................#......................................#................#.#........#..........".to_string(),
        "...................................................................................................................................".to_string(),
    ]
}


#[test]
fn testl_s1()
{
    let v = get_big_field();
    assert_eq!(part2(&v,100),6536);
}

#[test]
fn testl_s2()
{
    let v = get_big_field();
    assert_eq!(part2(&v,100), 6536);
}

#[test]
fn testl_s3()
{
    let v = get_big_field();
    assert_eq!(part2(&v,500), 167004);
}

#[test]
fn testl_4()
{
    let v = get_big_field();
    assert_eq!(part2(&v,1000), 668697);
}

#[test]
fn testl_5()
{
    let v = get_big_field();
    assert_eq!(part2(&v,5000), 16733044);
}

#[test]
fn testl_6()
{
    let v = get_big_field();
    assert_eq!(part2(&v,10000), 66931436);
}

#[test]
fn testl_7()
{
    let v = get_big_field();
    assert_eq!(part2(&v,50000), 1673523504);
}

#[test]
fn testl_8()
{
    let v = get_big_field();
    assert_eq!(part2(&v,100000), 6694148697);
}

#[test]
fn testl_9()
{
    let v = get_big_field();
    assert_eq!(part2(&v,500000), 167355128044);
}

#[test]
fn testl_10()
{
    let v = get_big_field();
    assert_eq!(part2(&v,1000000), 669420421436);
}

#[test]
fn testl_11()
{
    let v = get_big_field();
    assert_eq!(part2(&v,5000000), 16735534173504);
}

#[test]
fn testl_12()
{
    let v = get_big_field();
    assert_eq!(part2(&v,10000000), 66942142148697);
}

#[test]
fn testl_13()
{
    let v = get_big_field();
    assert_eq!(part2(&v,50000000), 1673553694628044);
}

#[test]
fn testl_14()
{
    let v = get_big_field();
    assert_eq!(part2(&v,100000000), 6694214769421436);
}
